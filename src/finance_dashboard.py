#!/filepath: src/finance_dashboard.py
"""
FinanceDashboard module for visualizing financial data.

This module is responsible for creating an interactive dashboard to visualize
financial data. It focuses solely on visualization and uses pre-processed
datasets generated by the Process class.
"""

import logging
from typing import TYPE_CHECKING, Optional

import dash
import dash_bootstrap_components as dbc

from category_mapper import CategoryMapper
from dashboard.callbacks import DatasetLoader, setup_callbacks
from dashboard.charts import ChartFactory, ChartStyler
from dashboard.components import CardCreator, DashboardConfig, DateParser
from dashboard.layouts import DashboardLayout

if TYPE_CHECKING:
    from config import Config


class FinanceDashboard:
    """
    A class for creating an interactive financial dashboard.
    """

    def __init__(
        self,
        config: "Config",
        logger: logging.Logger,
        category_mapper: Optional[CategoryMapper] = None,
    ):
        """
        Initialize the FinanceDashboard with configuration and logger.

        Args:
            config: Configuration object containing paths to datasets
            logger: Logger instance from the main application
            category_mapper: Optional CategoryMapper for consistent category colors
        """
        self.config = config
        self.logger = logger.getChild("FinanceDashboard")
        self.logger.info("FinanceDashboard initialized")

        # Load configuration for dashboard
        fonts = self.config.get(
            "fonts",
            {
                "title_font": "Montserrat",
                "body_font": "Open Sans",
                "font_url": "https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Open+Sans:wght@400;600&display=swap",
            },
        )

        # Create dashboard configuration
        dashboard_config = DashboardConfig(
            color_theme=self.config.get("color_palette", {}),
            chart_styling=self.config.get("chart_styling", {}),
            fonts=fonts,
            date_display_format=self.config.get("date_display_format", "DD/MM/YYYY"),
        )

        # Initialize the Dash app with external stylesheets
        self.app = dash.Dash(
            __name__,
            external_stylesheets=[
                dbc.themes.BOOTSTRAP,
                "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css",
                fonts.get(
                    "font_url",
                    "https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Open+Sans:wght@400;600&display=swap",
                ),
            ],
        )

        # Initialize components
        self.dataset_loader = DatasetLoader(config, logger)
        self.chart_styler = ChartStyler(dashboard_config)
        self.card_creator = CardCreator(dashboard_config.color_theme)

        # Use provided category mapper or create a new one
        self.category_mapper = category_mapper or CategoryMapper(config, logger)

        # Initialize chart factory with the category mapper
        self.chart_factory = ChartFactory(
            dashboard_config.color_theme, self.chart_styler, self.category_mapper
        )

        # Load the datasets
        self.dataset_loader.load_all_datasets()

        # Create the layout
        dashboard_layout = DashboardLayout(
            dashboard_config.color_theme,
            self.dataset_loader.min_date,
            self.dataset_loader.max_date,
            dashboard_config.fonts,
            dashboard_config.date_display_format,
        )
        self.app.layout = dashboard_layout.create_layout()

        # Set up the callbacks
        setup_callbacks(self)

    def run_server(self, debug: bool = False, port: int = 8050) -> None:
        """
        Run the Dash server.

        Args:
            debug: Enable debug mode
            port: Port to run the server on
        """
        self.logger.info(f"Dashboard will run at http://127.0.0.1:{port}/")
        self.app.run(debug=debug, port=port)
